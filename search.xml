<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FanHaolin&#39;s Blog for FYP Study</title>
    <url>/posts/4b7b/</url>
    <content><![CDATA[<h1 id="Welcome-to-OliverFan’s-Blog"><a href="#Welcome-to-OliverFan’s-Blog" class="headerlink" title="Welcome to OliverFan’s Blog"></a>Welcome to OliverFan’s Blog</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><blockquote>
<p>The aim of adding this blog is to demonstrate the learning process during the FYP,and also as a memo to record some important knowledge</p>
</blockquote>
<h3 id="Content-Introduction"><a href="#Content-Introduction" class="headerlink" title="Content Introduction"></a>Content Introduction</h3><table>
<thead>
<tr>
<th align="left">Item</th>
<th align="right">Usage</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Python</td>
<td align="right">Programming Skill</td>
</tr>
<tr>
<td align="left">Kivy</td>
<td align="right">UI Interface</td>
</tr>
<tr>
<td align="left">Deep Learning</td>
<td align="right">Wound Segmentation</td>
</tr>
</tbody></table>
<h3 id="Current-Content"><a href="#Current-Content" class="headerlink" title="Current Content"></a>Current Content</h3><ul>
<li><input checked="" disabled="" type="checkbox"> Fundamental Python</li>
<li><input checked="" disabled="" type="checkbox"> Kivy Framework</li>
<li><input disabled="" type="checkbox"> Deep Learning</li>
</ul>
<blockquote>
<p><strong>Note:</strong> Currently it is only basical introduced. </p>
</blockquote>
<h2 id="Feedback-amp-Bug-Report"><a href="#Feedback-amp-Bug-Report" class="headerlink" title="Feedback &amp; Bug Report"></a>Feedback &amp; Bug Report</h2><p>You can leave a message via Github </p>
<ul>
<li>Email: <a href="mailto:&#x66;&#104;&#x6c;&#x69;&#x65;&#108;&#116;&#115;&#56;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#x6d;">&#x66;&#104;&#x6c;&#x69;&#x65;&#108;&#116;&#115;&#56;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#x6d;</a></li>
</ul>
<hr>
<p>Thank you for reading this manual. </p>
]]></content>
      <tags>
        <tag>Introduction</tag>
      </tags>
  </entry>
  <entry>
    <title>Kivy Introduction and Trial</title>
    <url>/posts/81b9/</url>
    <content><![CDATA[<h2 id="Introducing-Kivy"><a href="#Introducing-Kivy" class="headerlink" title="Introducing Kivy"></a>Introducing Kivy</h2><blockquote>
<p><a href="https://kivy.org/#home">Kivy</a>-用于快速开发利用创新用户界面的应用程序（例如多点触摸应用程序）的开源Python库。<br>以下内容主要介绍 kivy 在Windows端的安装(基于Anoconda3,Pycharm)以及简单应用。</p>
</blockquote>
<h2 id="Kivy-Installation"><a href="#Kivy-Installation" class="headerlink" title="Kivy Installation"></a>Kivy Installation</h2><blockquote>
<p>涉及到的所有依赖均通过cmd中的pip-install安装完成，感谢<a href="https://pypi.tuna.tsinghua.edu.cn/simple">清华镜像源</a>提供的帮助。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install PACKAGES -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>
<blockquote>
<p>因为中国国内对kivy的普及程度不高，且多数app开发仍然使用原生的Java 语言作为底层基础，因而以下对kivy框架的背景、搭建、使用做一个简要的介绍</p>
</blockquote>
<a id="more"></a>

<h2 id="Kivy框架的安装与使用"><a href="#Kivy框架的安装与使用" class="headerlink" title="Kivy框架的安装与使用"></a>Kivy框架的安装与使用</h2><p>1.通过以下命令进行kivy框架的搭建与使用，主要有两种方法:<br>三行命令以安装Kivy:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m pip install docutils pygments pypiwin64 kivy.deps.sdl2 kivy.deps.glew</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m pip install kivy.deps.gstreamer</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m pip install kivy</span><br></pre></td></tr></table></figure>
<p>值得注意的是，kivy<a href="https://kivy.org/doc/stable/gettingstarted/installation.html#install-pip)">官网</a>,针对windows的安装方法为：<br><strong>To install the stable version of Kivy, from the terminal do:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m pip install kivy[base] kivy_examples --no-binary kivy</span><br></pre></td></tr></table></figure>
<p>2.安装kivy框架的官方示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m pip install kivy_examples</span><br></pre></td></tr></table></figure>
<p>3.验证kivy框架安装成功(Python IDLE)中运行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> kivy.app <span class="keyword">import</span> App</span><br><span class="line"><span class="keyword">from</span> kivy.uix.button <span class="keyword">import</span> Button</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestApp</span>(<span class="params">App</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Button(text=<span class="string">&#x27;FHL First App&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">TestApp().run()</span><br></pre></td></tr></table></figure>
<p>其实现代码展示如下:<br><img src="/posts/81b9/kivy1.png" alt="Code for first Kivy App"></p>
<p>其运行结果展示如下：<br><img src="/posts/81b9/kivy2.png" alt="Outcome for first Kivy App"></p>
<p>以上仅为对kivy安装的简要说明，其详尽的功能有机会会根据项目实例进行介绍。</p>
]]></content>
      <categories>
        <category>Kivy Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Kivy</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 中的 类和对象</title>
    <url>/posts/bdb2/</url>
    <content><![CDATA[<p><strong>对象</strong> 是python 中不可回避的知识点，Python无处不对象。如果把一个人比作对象，人们通常从外观方面和行为方面进行描述，比如金发碧眼，长头发等，这些属于静态的外观特征，而游泳，唱歌等属于行为方面的动态对象 。<br>Python 中的<strong>对象</strong> 亦是如此，一个对象的特征称为<strong>“属性”</strong>，一个对象的行为称为<strong>“方法”</strong>。<br>总而言之，<strong>对象=属性+方法</strong></p>
<a id="more"></a>
<hr>
<h2 id="1-面对对象编程——self"><a href="#1-面对对象编程——self" class="headerlink" title="1. 面对对象编程——self"></a>1. 面对对象编程——self</h2><blockquote>
<p>如果将类比作图纸，那么由类实例化的对象才是真正可以住进去的房子。Python 中的self参数就是这样的道理，由同一个类可以生成无数对象，当第一个对象的方法被调用时，对象会将自身的引用作为第一个参数传给该方法，那么python就知道需要操作哪个对象的方法了。</p>
</blockquote>
<p>通过一个简单的例子理解这一思想。</p>
<h3 id="Code-block"><a href="#Code-block" class="headerlink" title="Code block"></a>Code block</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Study</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setNmae</span>(<span class="params">self, name</span>):</span></span><br><span class="line">    self.name = name</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">study</span>(<span class="params">self</span>):</span></span><br><span class="line">    print(<span class="string">&quot;Who love studying?%s loves studying.&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = Study()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.setNmae(Fan Haolin)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.study()</span><br><span class="line">Who love studying?Fan Haolin loves studying.</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="2-Python-魔法方法——-“init-”"><a href="#2-Python-魔法方法——-“init-”" class="headerlink" title="2. Python 魔法方法—— “init()”"></a>2. Python 魔法方法—— “<strong>init</strong>()”</h2><blockquote>
<p>通常把此种方法称为构造方法，其魔法体现在只要实例化一个对象，这个方法就会在对象被创建时自动调用。其实，实例化对象是可以传入参数的，这些参数会自动传入<strong>init</strong>()中，可以通过重写这个方法以自定义对象的初始化操作。</p>
</blockquote>
<p>同样的一个简单的例子。</p>
<h3 id="Code-block-1"><a href="#Code-block-1" class="headerlink" title="Code block"></a>Code block</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Study</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">study</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;Who love studying?%s loves studying.&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = Study(Fan Haolin)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.study()</span><br><span class="line">Who love studying?Fan Haolin loves studying.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
