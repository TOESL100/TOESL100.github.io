<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FanHaolin&#39;s Blog for FYP Study</title>
    <url>/posts/4b7b/</url>
    <content><![CDATA[<h1 id="Welcome-to-OliverFan’s-Blog"><a href="#Welcome-to-OliverFan’s-Blog" class="headerlink" title="Welcome to OliverFan’s Blog"></a>Welcome to OliverFan’s Blog</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><blockquote>
<p>The aim of adding this blog is to demonstrate the learning process during the FYP,and also as a memo to record some important knowledge</p>
</blockquote>
<h3 id="Content-Introduction"><a href="#Content-Introduction" class="headerlink" title="Content Introduction"></a>Content Introduction</h3><table>
<thead>
<tr>
<th align="left">Item</th>
<th align="right">Usage</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Python</td>
<td align="right">Programming Skill</td>
</tr>
<tr>
<td align="left">Kivy</td>
<td align="right">UI Interface</td>
</tr>
<tr>
<td align="left">Deep Learning</td>
<td align="right">Wound Segmentation</td>
</tr>
</tbody></table>
<h3 id="Current-Content"><a href="#Current-Content" class="headerlink" title="Current Content"></a>Current Content</h3><ul>
<li><input checked disabled type="checkbox"> Fundamental Python</li>
<li><input checked disabled type="checkbox"> Kivy Framework</li>
<li><input disabled type="checkbox"> Deep Learning</li>
</ul>
<blockquote>
<p><strong>Note:</strong> Currently it is only basical introduced. </p>
</blockquote>
<h2 id="Feedback-amp-Bug-Report"><a href="#Feedback-amp-Bug-Report" class="headerlink" title="Feedback &amp; Bug Report"></a>Feedback &amp; Bug Report</h2><p>You can leave a message via Github or Email</p>
<ul>
<li>Github: <a href="https://github.com/TOESL100">https://github.com/TOESL100</a></li>
<li>Email: <a href="mailto:&#x66;&#104;&#x6c;&#105;&#x65;&#108;&#116;&#115;&#56;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#111;&#x6d;">&#x66;&#104;&#x6c;&#105;&#x65;&#108;&#116;&#115;&#56;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#111;&#x6d;</a></li>
</ul>
<hr>
<p>Thank you for reading this manual. Looking for your advice!</p>
]]></content>
      <tags>
        <tag>Introduction</tag>
      </tags>
  </entry>
  <entry>
    <title>FYP Web App</title>
    <url>/posts/672a/</url>
    <content><![CDATA[<h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1.Introduction"></a>1.Introduction</h2><h3 id="1-1-The-Aim-of-The-WebApp"><a href="#1-1-The-Aim-of-The-WebApp" class="headerlink" title="1.1 The Aim of The WebApp"></a>1.1 The Aim of The WebApp</h3><p>　　As a supplement to FYP App, this webapp aims to use a more lightweight framework to achieve the goals of FYP, including wound contour recognition, wound area estimation, corresponding 3D printing material estimation, and corresponding wound characteristics analysis.Thanks to the framework named <a href="https://streamlit.io/">Streamlit</a>.</p>
<h3 id="1-2-Brief-Introduction-of-the-Streamlit"><a href="#1-2-Brief-Introduction-of-the-Streamlit" class="headerlink" title="1.2 Brief Introduction of the Streamlit"></a>1.2 Brief Introduction of the Streamlit</h3><p>　　Streamlit turns data scripts into shareable web apps in minutes.Adding a widget is the same as declaring a variable. No need to write a backend, define routes, handle HTTP requests, connect a frontend, write HTML, CSS, JavaScript, …<br>　　And the installation is simple that you can use the code as follow to install the package:</p>
<pre class="line-numbers language-python"><code class="language-python">     pip install streamlit <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>simple
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="2-Segmentation-Based-on-OpenCV"><a href="#2-Segmentation-Based-on-OpenCV" class="headerlink" title="2.Segmentation Based on OpenCV"></a>2.Segmentation Based on OpenCV</h2><p>　　At the beginning,dragging or uploading the wound image via local address or photo album.In order to analyze the wound image,the following steps are necessary,which is demonstrated as follow:</p>
<ul>
<li><strong>Step 1</strong> - Calibrate image. The calibration of the image can be realized by dragging the corners of the marker over two points of known distance in the horizontal axis and enter the distance.</li>
<li><strong>Step 2</strong> - Adjust the bounding box to select the wound(<em>Region Of Interest</em>).</li>
<li><strong>Step 3</strong> - Adjust the Threshold and Ratio sliders to get the ideal segmentation.</li>
</ul>
<h3 id="2-1-The-UI-Interface-of-OpenCV-Method"><a href="#2-1-The-UI-Interface-of-OpenCV-Method" class="headerlink" title="2.1 The UI Interface of OpenCV Method"></a>2.1 The UI Interface of OpenCV Method</h3><blockquote>
<p>The UI interface must contain the image browser,slider,and the illustration of image.</p>
</blockquote>
<h4 id="2-1-1-The-Realization-of-Image-Uploader"><a href="#2-1-1-The-Realization-of-Image-Uploader" class="headerlink" title="2.1.1 The Realization of Image Uploader"></a>2.1.1 The Realization of Image Uploader</h4><p>The uploader component is simple to use </p>
<pre class="line-numbers language-python"><code class="language-python">     streamlit<span class="token punctuation">.</span>file_uploader<span class="token punctuation">(</span>label<span class="token punctuation">,</span> type<span class="token operator">=</span>None<span class="token punctuation">,</span> accept_multiple_files<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> key<span class="token operator">=</span>None<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>Parameters</p>
</blockquote>
<ul>
<li><strong>label (<em>str</em>)</strong> – A short label explaining to the user what this file uploader is for.</li>
<li><strong>type (<em>str or list of str or None</em>)</strong> – Array of allowed extensions. <code>&quot;png&quot;</code>,<code>&quot;jpg&quot;</code>. The default is None, which means all extensions are allowed.</li>
<li><strong>accept_multiple_files (bool)</strong> – If True, allows the user to upload multiple files at the same time, in which case the return value will be a list of files. Default: False</li>
<li><strong>key (<em>str</em>)</strong> – An optional string to use as the unique key for the widget. If this is omitted, a key will be generated for the widget based on its content. Multiple widgets of the same type may not share the same key.</li>
</ul>
<h4 id="2-1-1-The-Realization-of-Threshold-Adjust"><a href="#2-1-1-The-Realization-of-Threshold-Adjust" class="headerlink" title="2.1.1 The Realization of Threshold Adjust"></a>2.1.1 The Realization of Threshold Adjust</h4><p>The ROI Selection and Threshold Adjusting is using streamlit-cropper and streamlit slider,the installation of the streamlit-cropper and the interpretation of the streamlit slider is demonstrated as follow:</p>
<pre class="line-numbers language-python"><code class="language-python">     pip install streamlit<span class="token operator">-</span>cropper
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="/posts/672a/streamlit_cropper_demo.gif" alt="Demo of Image Cropper"></p>
<pre class="line-numbers language-python"><code class="language-python">streamlit<span class="token punctuation">.</span>slider<span class="token punctuation">(</span>label<span class="token punctuation">,</span> min_value<span class="token operator">=</span>None<span class="token punctuation">,</span> max_value<span class="token operator">=</span>None<span class="token punctuation">,</span> value<span class="token operator">=</span>None<span class="token punctuation">,</span> step<span class="token operator">=</span>None<span class="token punctuation">,</span> format<span class="token operator">=</span>None<span class="token punctuation">,</span> key<span class="token operator">=</span>None<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>The detailed usage please refer to the <a href="https://docs.streamlit.io/en/latest/api.html?highlight=slider#streamlit.slider">official documentation</a></p>
<h3 id="2-2-The-Implementation-of-Wound-Segmentation"><a href="#2-2-The-Implementation-of-Wound-Segmentation" class="headerlink" title="2.2 The Implementation of Wound Segmentation"></a>2.2 The Implementation of Wound Segmentation</h3><p>The input image is processed based on GaussianBlur and Edge detection(<em>Canny Edge</em>)<br>Resize the input image into the shape of <code>(256,256)</code>,then turn the format of input image into RGB,Gray and LAB.<br>Set the threshold to the value which adjusted by the slider mentioned before,and then the result will be illustrated below the original image.</p>
]]></content>
      <categories>
        <category>FYP Record</category>
      </categories>
      <tags>
        <tag>FYP</tag>
        <tag>WebApp</tag>
        <tag>Streamlit</tag>
      </tags>
  </entry>
  <entry>
    <title>FYP Application Introduction</title>
    <url>/posts/2adb/</url>
    <content><![CDATA[<h1 id="Acknowledgement"><a href="#Acknowledgement" class="headerlink" title="Acknowledgement"></a>Acknowledgement</h1><p>　　The FYP project is based on Professor Fuh Ying Hsi FYP project: <strong>Development of an AI-based region detection App. for wound healing therapy.</strong><br>　　Thanks Professor Fu and Professor Lu for their great help during the completion of the project.Thanks for the opportunity given by <a href="https://www.nus.edu.sg/">NUS</a>.</p>
<h1 id="Record-For-Using-Wound-Analysis-App"><a href="#Record-For-Using-Wound-Analysis-App" class="headerlink" title="Record For Using Wound Analysis App"></a>Record For Using Wound Analysis App</h1><p>　　This passage is written on the purpose of introducing the function of the FYP application.</p>
<h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><blockquote>
<p>The App mainly includes four functions,which are :</p>
</blockquote>
<ul>
<li><strong>CV</strong> - Using <strong>Traditional Computer Vision Method</strong> to analyze wound image,</li>
<li><strong>DL</strong> - Using <strong>Deep Learning Method</strong> to segment the wound region from original image,</li>
<li><strong>UI</strong> - Using <strong>Kivy Framework</strong> to design the UI interface.</li>
<li><strong>More</strong> - And some other tools like PDF generation &amp; sending via E-mail,Weather and AI chatbot as customer service.</li>
</ul>
<p>The following content will introduce the individual function of the main pages.</p>
<h2 id="2-Login-Verification-Updated-at-2020-02-19"><a href="#2-Login-Verification-Updated-at-2020-02-19" class="headerlink" title="2. Login Verification: Updated at 2020/02/19"></a>2. Login Verification: Updated at 2020/02/19</h2><p><em>Version 0.1.0</em></p>
<blockquote>
<p>The current login page is just an empty shell with no specific functions,while the aim is using Google authorization to achive the function of signing up and signing in.</p>
</blockquote>
<p>　　The User are supposed to type the username and corresponding password to log in the app,the eyes on the right can be clicked to hide the password and the UI interface is illustrated as below:</p>
<p><img src="/posts/2adb/login.png" alt="UI Interface for Login Page"></p>
<h3 id="2-1-Login-Page"><a href="#2-1-Login-Page" class="headerlink" title="2.1 Login Page"></a>2.1 Login Page</h3><h4 id="Updated-at-2020-02-18"><a href="#Updated-at-2020-02-18" class="headerlink" title="Updated at 2020/02/18"></a>Updated at 2020/02/18</h4><ul>
<li><p><strong>Integration &amp; Optimization of Functions such as Style Replacement</strong> - Add the original application style setting function to the setting page.</p>
</li>
<li><p><strong>Optimized Realization of Login Function</strong> - The original login interface has only been designed for the interface. This update adds the back-end database to realize the login function. At the same time, consider using third-party logins such as Github and Facebook to simplify the database structure and load. The existing interface is shown in the figure below. The user icon in the upper left corner can be used to create a new user and store it. At the same time, this page can jump to the password recovery interface to provide password recovery services for registered users.</p>
</li>
<li><p><strong>Add Verification or Error Prompt</strong> - Added prompts of incorrect types, including incorrect password, input user does not exist, etc. Set the login button to Progress Button to optimize the interface design and user experience.The detailed demo is showed as below:<br><img src="/posts/2adb/login_update.gif" alt="Verification or Error Prompt--Version 0.1.0"></p>
</li>
</ul>
<h4 id="Updated-at-2020-02-25"><a href="#Updated-at-2020-02-25" class="headerlink" title="Updated at 2020/02/25"></a>Updated at 2020/02/25</h4><ul>
<li><p><strong>Optimization of Textfield</strong> -Adjust the position of the icon on the right of the textfield, design a new FloatLayout to adjust the icon on the right to the textfield, beautify the design, and increase the user’s operability.<br><img src="/posts/2adb/login_update.png" alt="UI Interface for Login Page--Updated"></p>
</li>
<li><p><strong>Optimization of Page Layout</strong> -Move the password recovery page to the Toolbar to reduce the layout items of the login page. Its icon icon is shown in the figure below. Click to jump to the password recovery page.<br><img src="/posts/2adb/password_retrieve_icon.png" alt="Icon Button for Password Retrieve"></p>
</li>
<li><p><strong>Optimization of E-mail Typing</strong> -Add a list to visit the created users. Activate the form column at the bottom by clicking the button to the right of the first textfield. Further, the user can click the corresponding user name to automatically fill it in the first textfield, which simplifies the cumbersome login required Input content.<br><img src="/posts/2adb/user_list.gif" alt="Auto Fill the Textfield "></p>
</li>
<li><p><strong>Added Remember User Option</strong> -In order to reduce the tedious operation of entering a password every time a user logs in to the application, this update uses Checkbox to change the value of Remember (BOOLEAN) in the database, so that logged-in users can use this option to avoid repeated password input. On this basis, by double-clicking the text box in the password field, the corresponding user login password can be automatically filled in.The updated page is shown below:<br><img src="/posts/2adb/remember_checkbox.png" alt="Added Remember User Option"></p>
</li>
</ul>
<h4 id="Updated-at-2020-03-02"><a href="#Updated-at-2020-03-02" class="headerlink" title="Updated at 2020/03/02"></a>Updated at 2020/03/02</h4><ul>
<li><strong>Adding Login Via Github</strong> -Users can log in through their personal GitHub account, which reduces the time it takes for users to register a new account. If you successfully log in through your Github account, record the Github value (BOOLEAN) as True in the database. On this basis, the password reset option of the personal page is optimized: if you log in through Github, the password change function will be invalid, and the user needs to go to the official Github website to update or reset the password.<br><img src="/posts/2adb/github.png" alt="Login Via Github"></li>
</ul>
<h3 id="2-2-User-Register-Page"><a href="#2-2-User-Register-Page" class="headerlink" title="2.2 User Register Page"></a>2.2 User Register Page</h3><h4 id="Updated-at-2020-02-17"><a href="#Updated-at-2020-02-17" class="headerlink" title="Updated at 2020/02/17"></a>Updated at 2020/02/17</h4><p>　　The addition of the user registration function, this function can create new user personal information based on the user name and the email address that the user fills in. After the creation is completed, you can return to the login page to log in.And the UI interface is illustrated as the figure below:<br><img src="/posts/2adb/register.png" alt="UI Interface for Register Page"></p>
<h3 id="2-3-Password-Retrieve-Page"><a href="#2-3-Password-Retrieve-Page" class="headerlink" title="2.3 Password Retrieve Page"></a>2.3 Password Retrieve Page</h3><h4 id="Updated-at-2020-02-18-1"><a href="#Updated-at-2020-02-18-1" class="headerlink" title="Updated at 2020/02/18"></a>Updated at 2020/02/18</h4><p>　　This function is designed to take into account the possibility of users forgetting their passwords, enter the email used during registration to retrieve and reset the password, and then log in. The design of its interface is shown in the figure below.<br><img src="/posts/2adb/retrieve.png" alt="UI Interface for Retrieve Page"></p>
<h2 id="3-Adding-Patient-Information"><a href="#3-Adding-Patient-Information" class="headerlink" title="3. Adding Patient Information"></a>3. Adding Patient Information</h2><blockquote>
<p>The App is designed with the ability to store patients information via sqlite which is the Python’s built-in database.</p>
</blockquote>
<p>　　The user can click the <strong>Adding</strong> button on the navigation drawer to jump to the specified page,which is demonstrated as the figure below.<br><img src="/posts/2adb/add.png" alt="UI Interface for Adding Patient Page"></p>
<p>　　The required information are:Patient’s Name,Age,Gender,Creation Date.The creation date can be choosed by using datepicker,where you should <strong>double click</strong> the iconbutton.<br><img src="/posts/2adb/datepicker.gif" alt="Double Click To Activate DatePicker"></p>
<p>　　Meanwhile,this page can be skipped directly and jump to <strong>Upload Page</strong> or <strong>Home</strong>.<br>　　At present stage,the data is collected in database,I am considering use <a href="https://console.firebase.google.com/">Firebase</a> to replace it in further work,as firebase can loose the burden on the local storage.</p>
<h2 id="4-Home-Page"><a href="#4-Home-Page" class="headerlink" title="4. Home Page"></a>4. Home Page</h2><blockquote>
<p>You can get to the home page if you have finished creating patient information.And the tabhint is used to guide the user for activating navigation drawer.Meanwhile,the chips on the bottom of the home shows the related knowledge and skills.</p>
</blockquote>
<p>　　The interface of the home page is showed as follow:<br><img src="/posts/2adb/home.png" alt="UI Interface for Home Page"><br>　　To jump to the corresponding tab, you can use the navigation drawer. In the figure below, the unique page implementation is shown.<br><img src="/posts/2adb/navigation.png" alt="Navigation Drawer"></p>
<h4 id="Updated-at-2020-02-14"><a href="#Updated-at-2020-02-14" class="headerlink" title="Updated at 2020/02/14"></a>Updated at 2020/02/14</h4><p>　　The chips on the Home Page can be clicked and then you can view the relevant knowledge used in this App through the official website or Wikipedia,such as Python,Kivy,Json,etc.<br><img src="/posts/2adb/home_chips.png" alt="Chips on Home Page"></p>
<p>　　The icon button on the right corner of the home page have the ability of activating the dialog with the QRcode,which you can scan to visit this personal blog.<br><img src="/posts/2adb/qrcode.png" alt="QRcode View"></p>
<h2 id="5-Upload-Wound-Image-amp-Analyze"><a href="#5-Upload-Wound-Image-amp-Analyze" class="headerlink" title="5. Upload Wound Image &amp; Analyze"></a>5. Upload Wound Image &amp; Analyze</h2><blockquote>
<p>This is one of the main tasks of the application,which contains the wound image upload.The core idea is to process and analyze images based on OpenCv through traditional computer vision methods, and then obtain the contour and specific characteristics of the wound.</p>
</blockquote>
<p>More specifically, it mainly includes three functions: <strong>taking pictures by camera</strong>, <strong>uploading local pictures /taking pictures &amp; wound pictures to the database</strong>, <strong>analyzing and processing wound pictures</strong>.</p>
<h3 id="5-1-Camera"><a href="#5-1-Camera" class="headerlink" title="5.1 Camera"></a>5.1 Camera</h3><p>　　The camera function can be achieved by the camera on mobile phone,which can store the picture taken as the format <code>&quot;%Y%m%d%H%M%S.png&quot;</code>,at present the picture is stored in local address,I am considering using cloud-database as well.</p>
<h3 id="5-2-Upload-Wound-Image"><a href="#5-2-Upload-Wound-Image" class="headerlink" title="5.2 Upload Wound Image"></a>5.2 Upload Wound Image</h3><p>　　Professional doctors will need to upload wound pictures to the database,thus this function aims to pop up a window to choose file from album in mobilephone.</p>
<h4 id="Updated-at-2020-03-05"><a href="#Updated-at-2020-03-05" class="headerlink" title="Updated at 2020/03/05"></a>Updated at 2020/03/05</h4><p>　　The former format for the user uploaded image is <code>&quot;uploadimage/input.png&quot;</code> ,which is stored at the local address.After optimization,the <strong>COS</strong> is taken into practical account.The new format for the uploaded image is  showed in the code below:</p>
<pre class="line-numbers language-python"><code class="language-python">    create <span class="token operator">=</span> App<span class="token punctuation">.</span>get_running_app<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>screen_manager<span class="token punctuation">.</span>get_screen<span class="token punctuation">(</span><span class="token string">'Create'</span><span class="token punctuation">)</span>
    PatientName <span class="token operator">=</span> create<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ids<span class="token punctuation">.</span>PatientName<span class="token punctuation">.</span>text<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span>
    upload_image_file_path <span class="token operator">=</span> <span class="token string">"uploadimage/&amp;#123;&amp;#125;_input.jpg"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>PatientName<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>　　Meanwhile,the code used for uploading image to the COS is also showed as below,the more detailed information can be found at Tencent Official Site of <a href="https://cloud.tencent.com/document/product/436/35151#.E7.AE.80.E4.BB.8B">COS</a>:</p>
<pre class="line-numbers language-python"><code class="language-python">    response<span class="token operator">=</span>client<span class="token punctuation">.</span>upload_file<span class="token punctuation">(</span>
        Bucket<span class="token operator">=</span><span class="token string">'wound-1301658428'</span><span class="token punctuation">,</span>
        LocalFilePath<span class="token operator">=</span>upload_image_file_path<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># Path to local file</span>
        Key<span class="token operator">=</span>upload_image_file_path<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># File name after uploading to the bucket</span>
    <span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="5-3-Analyze-Wound-Image"><a href="#5-3-Analyze-Wound-Image" class="headerlink" title="5.3 Analyze Wound Image"></a>5.3 Analyze Wound Image</h3><p>　　This module is implemented as the main function of the application, which can realize the identification of the <em>wound contour</em> and the analysis of the corresponding <em>wound characteristics</em>.<br>　　After uploading the picture, the back-end will recognize it, and display the uploaded original picture and the processed picture on the page. On this basis, The corresponding report can be generated and sent to the mailbox.An example usage is demonstrated as follow:<br><img src="/posts/2adb/analyze.gif" alt="Application Example of Image Analysis"></p>
<blockquote>
<p>Note:If the user click the E-mail Button,the application will send an e-mail with an attachment containing <strong>Wound Analysis Report</strong> to designated mailbox(for example:<a href="mailto:&#102;&#x68;&#x6c;&#x69;&#x65;&#x6c;&#116;&#115;&#x38;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#102;&#x68;&#x6c;&#x69;&#x65;&#x6c;&#116;&#115;&#x38;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a>).Please refer to the <a href="https://oliverfan.top/posts/40f8/">PDF Generator</a> for detailed completion steps and source code.
　　</p>
</blockquote>
<p>　　A demo of the attachment is demonstrated as the figure below:<br><img src="/posts/2adb/wound_report.png" alt="Wound Analysis Report"></p>
<h4 id="Updated-at-2020-02-15"><a href="#Updated-at-2020-02-15" class="headerlink" title="Updated at 2020/02/15"></a>Updated at 2020/02/15</h4><p>　　Optimize the file management pop-up window, beautify its appearance and increase its use functions, the nature of its asynchronous processing and wound image analysis has not changed.<br><img src="/posts/2adb/file_manager.png" alt="Optimized File Manager">    </p>
<h4 id="Updated-at-2020-03-01"><a href="#Updated-at-2020-03-01" class="headerlink" title="Updated at 2020/03/01"></a>Updated at 2020/03/01</h4><p>　　Optimized the source of the patient’s name, age, gender, etc. for wound analysis details. Originally, it was set to determine the patient’s name to obtain the detailed information obtained from the analysis. Therefore, only one line of information for the same patient can be displayed. This information has been analyzed in the previous analysis. Stored in the patient information of the corresponding patient. Now it has been optimized by the following code. The realization idea is mainly based on the patient’s name as the identification, so as to retrieve the relevant information in the corresponding database and display it in the wound details page and the generated pdf file.</p>
<pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">Name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># sql = "SELECT PatientName FROM Patient WHERE PatientName='FanHaolin'"</span>
        <span class="token comment" spellcheck="true"># The above is the former code,which is childish</span>
        create <span class="token operator">=</span> App<span class="token punctuation">.</span>get_running_app<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>screen_manager<span class="token punctuation">.</span>get_screen<span class="token punctuation">(</span><span class="token string">'Create'</span><span class="token punctuation">)</span>
        PatientName <span class="token operator">=</span> create<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ids<span class="token punctuation">.</span>PatientName<span class="token punctuation">.</span>text<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span>
        sql <span class="token operator">=</span> <span class="token string">"SELECT PatientName FROM Patient WHERE PatientName='&amp;#123;&amp;#125;'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>PatientName<span class="token punctuation">)</span>
        res <span class="token operator">=</span> select_data<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>ids<span class="token punctuation">.</span>name<span class="token punctuation">.</span>text <span class="token operator">=</span> str<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="6-Wound-Image-Segmentation–Deep-Learning"><a href="#6-Wound-Image-Segmentation–Deep-Learning" class="headerlink" title="6. Wound Image Segmentation–Deep Learning"></a>6. Wound Image Segmentation–Deep Learning</h2><h2 id="7-Patient-List"><a href="#7-Patient-List" class="headerlink" title="7. Patient List"></a>7. Patient List</h2><blockquote>
<p> This page is an important part of the realization of electronic medical records</p>
</blockquote>
<p>The setting of this page is mainly to be able to access the patient’s medical records, which can be jumped by clicking the search button in the upper right corner of the Home Page, or by the History option in the Navigation Drawer. After jumping to this page, you can search for the patient’s name through the text box above to obtain detailed information about the patient. The page is displayed as follows:</p>
<p><img src="/posts/2adb/patient_history.png" alt="Patient List"></p>
<h4 id="Updated-at-2020-02-26"><a href="#Updated-at-2020-02-26" class="headerlink" title="Updated at 2020/02/26"></a>Updated at 2020/02/26</h4><ul>
<li><strong>Search Funtion Optimization</strong> -This update adds a button click event corresponding to the patient’s name on the patient record page. Specifically, clicking the patient’s name can access its detailed medical history information. The analyzed medical history can be obtained through the <strong>Swipe Menu</strong> at the bottom of the sliding page. The next step is to add a new medical record modification function, which can be modified according to the doctor’s actual diagnosis. The current medical history interface is shown in the figure:</li>
</ul>
<p><img src="/posts/2adb/patient_history_updated.png" alt="Patient List &amp; Detailed Patient Information"></p>
<ul>
<li><strong>Some Details Modification</strong> - When click on the corresponding patient name within the patient list,the search textfield will change into the patient’s name,and you can use the icon-button on the right side of the textfield to delete the current content of the textfield.</li>
</ul>
<h2 id="8-Weather"><a href="#8-Weather" class="headerlink" title="8. Weather"></a>8. Weather</h2><blockquote>
<p> The original intention of the weather module is to be used as a small life tool to provide doctors with timely weather information to deal with possible weather conditions.</p>
</blockquote>
<p>　　The temperature of the displayed area can be selected by yourself ,the default is (Singapore), and the automatic positioning function is to be developed.</p>
<blockquote>
<p>Note:The Weather funtion is supported by <a href="https://openweathermap.org/">OpenWeatherMap API</a></p>
</blockquote>
<p><img src="/posts/2adb/weather.gif" alt="Weather In Singapore"><br>　　Meanwhile,the button on the toolbar have the ability to back to home or refresh the widget.</p>
<h2 id="9-Personal-Setting"><a href="#9-Personal-Setting" class="headerlink" title="9. Personal Setting"></a>9. Personal Setting</h2><blockquote>
<p>The personal setting page now contains name-chage-box,where the user can change the user name and avatar.Consider adding theme replacement function later.The the UI interface is illustrated as below:</p>
</blockquote>
<p><img src="/posts/2adb/setting.png" alt="UI Interface for Personal Setting Page"></p>
<h3 id="9-1-Avatar-Change"><a href="#9-1-Avatar-Change" class="headerlink" title="9.1 Avatar Change"></a>9.1 Avatar Change</h3><h4 id="Updated-at-2020-02-21"><a href="#Updated-at-2020-02-21" class="headerlink" title="Updated at 2020/02/21"></a>Updated at 2020/02/21</h4><p>　　The user can change the user avatar with clicking on the current avatar,which will activate the avatar list,the user can randomly choose one by clicking the image in the image list.</p>
<p><img src="/posts/2adb/avatar_list.png" alt="Avatar List"> </p>
<h3 id="9-2-Dark-Mode"><a href="#9-2-Dark-Mode" class="headerlink" title="9.2 Dark Mode"></a>9.2 Dark Mode</h3><h4 id="Updated-at-2020-02-21-1"><a href="#Updated-at-2020-02-21-1" class="headerlink" title="Updated at 2020/02/21"></a>Updated at 2020/02/21</h4><p>　　The dark mode is set to meet the needs of users in different environments, and the mode can be switched through the switch.The schematic diagram of switching dark mode is shown below:<br><img src="/posts/2adb/theme-style.png" alt="Mode Change"> </p>
<h3 id="9-3-Password-Visibility"><a href="#9-3-Password-Visibility" class="headerlink" title="9.3 Password Visibility"></a>9.3 Password Visibility</h3><h4 id="Updated-at-2020-02-21-2"><a href="#Updated-at-2020-02-21-2" class="headerlink" title="Updated at 2020/02/21"></a>Updated at 2020/02/21</h4><p>　　This setting option can be used to set the visibility of the password, currently this setting is mainly for the login verification interface.</p>
<h3 id="9-4-Password-Reset"><a href="#9-4-Password-Reset" class="headerlink" title="9.4 Password Reset"></a>9.4 Password Reset</h3><h4 id="Updated-at-2020-02-21-3"><a href="#Updated-at-2020-02-21-3" class="headerlink" title="Updated at 2020/02/21"></a>Updated at 2020/02/21</h4><p>　　This function provides the option of password reset for users who have successfully logged in. When the old password is inconsistent with the original password, the new password is stored in the corresponding user information in the database. This function also considers using <strong>FireBase</strong> as storage in subsequent iterations database.For specific operations, please follow the pop-up prompts and confirm.<br><img src="/posts/2adb/password_reset.png" alt="Password Reset Dialog"></p>
<h3 id="9-5-Logout-Current-Account"><a href="#9-5-Logout-Current-Account" class="headerlink" title="9.5 Logout Current Account"></a>9.5 Logout Current Account</h3><p>　　The logout function will log out of the current login account and jump to the login page. This function provides the application with the function of independent use of multiple accounts and stores user information separately.</p>
<h2 id="10-Help-Page"><a href="#10-Help-Page" class="headerlink" title="10. Help Page"></a>10. Help Page</h2><p>　　The help page contains the chatbot,which has the ability to answer questions for the users.The chatbot can answer the questions like:</p>
<ul>
<li><strong>How are you</strong></li>
<li><strong>How to upload</strong></li>
<li><strong>How to use AI</strong></li>
<li><strong>How to add</strong></li>
<li><strong>What are you doing</strong><br>　　The figure below shows some example usages of help page:<br><img src="/posts/2adb/chatbot.png" alt="Sample Questions for Help Page"></li>
</ul>
<h2 id="11-Exit-App"><a href="#11-Exit-App" class="headerlink" title="11. Exit App"></a>11. Exit App</h2><p>　　To ensure the convenience of the user, the application has set up an exit button, and before the user confirms the exit, a pop-up prompt will be displayed to continue. For example, the following gif shows the specific operation process<br><img src="/posts/2adb/exit.gif" alt="Exit App Dialog"></p>
]]></content>
      <categories>
        <category>FYP Record</category>
      </categories>
      <tags>
        <tag>FYP</tag>
        <tag>Kivy</tag>
      </tags>
  </entry>
  <entry>
    <title>Deep Learning-Activation Function</title>
    <url>/posts/a2d2/</url>
    <content><![CDATA[<blockquote>
<p><strong>激活函数</strong>（Activation Function)神经网络中将输入信号的总和转化为输出信号的的函数。其作用在于如何来激活输入信号的总和。<br>It converts the sum of the input signal to the output signal. Its role is to determine how to activate the sum of input signals.The activation function of neural network must use nonlinear function.</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="几种常见的激活函数以及Python实现"><a href="#几种常见的激活函数以及Python实现" class="headerlink" title="几种常见的激活函数以及Python实现"></a>几种常见的激活函数以及Python实现</h2><p>以下主要简要介绍几种常见的激活函数以及python实现</p>
<h3 id="Sigmoid-Function"><a href="#Sigmoid-Function" class="headerlink" title="Sigmoid Function"></a>Sigmoid Function</h3><p>Sigmoid 函数的平滑性对神经网络的学习具有重要意义<br>神经网络中常用的一个激活函数为Sigmoid 函数，其数学表达式为：<br>$$    Sigmoid(x) = \dfrac{1}{1+e^{-x}} $$<br>其Python实现方法以及图示绘制为：</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> mpl_toolkits<span class="token punctuation">.</span>axisartist <span class="token keyword">as</span> axisartist
<span class="token keyword">import</span> matplotlib


<span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    
<span class="token keyword">def</span> <span class="token function">plot_sigmoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span>
    y <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Sigmoid Function'</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># plt.xlabel('X Axis')</span>
    <span class="token comment" spellcheck="true"># plt.ylabel('Y Axis')</span>
    <span class="token comment" spellcheck="true"># plt.tight_layout()</span>
    ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span>
    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span>
    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'bottom'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_ticks_position<span class="token punctuation">(</span><span class="token string">'bottom'</span><span class="token punctuation">)</span>
    ax<span class="token punctuation">.</span>yaxis<span class="token punctuation">.</span>set_major_locator<span class="token punctuation">(</span>matplotlib<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span>MultipleLocator<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">"sigmoid.png"</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    plot_sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其结果展示如下：<br><img src="/posts/a2d2/Sigmoid.png" alt="Outcome for Sigmoid Function"></p>
<hr>
<h3 id="ReLU-Function"><a href="#ReLU-Function" class="headerlink" title="ReLU Function"></a>ReLU Function</h3><p><strong>ReLU 函数</strong>的全程为 Rectified Linear Unit，即意为<em>校正线性单元</em>。</p>
<p>其函数特征为：ReLU 函数在输入大于0时，直接输出该值；在输入小于0时，输出0，其python实现可以通过以下两种方式：</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">relu</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">relu</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>补充：<strong>shape函数</strong>的功能是读取矩阵的长度，比如shape[0]就是读取矩阵第一维度的长度,相当于行数。</p>
</blockquote>
<hr>
<h3 id="Tanh-Function"><a href="#Tanh-Function" class="headerlink" title="Tanh Function"></a>Tanh Function</h3><p>Tanh Function 的数学表达式为：<br>$$<br>\begin{align}<br>        Tanh(x) &amp;= \dfrac{e^{x}-e^{-x}}{e^{x}+e^{-x}}<br>\end{align}<br>$$</p>
<p>其Python 的实现具体实现为：</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">tanh</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>此函数的绘制思路与Sigmoid 函数基本相似，但此处本文采用区别于前的方法进行绘制：</p>
<pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">6.0</span><span class="token punctuation">,</span> <span class="token number">6.0</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> tanh<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Tanh Function'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'X Axis'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Y Axis'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#plt.tight_layout()</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此种方法绘制的图线<em>没有坐标轴</em>因此可能缺乏严谨性，可以加以区分，其绘制的结果如下图所示：<br><img src="/posts/a2d2/Tanh.png" alt="Outcome for Tanh Function"></p>
<hr>
<h2 id="线性函数与非线性函数"><a href="#线性函数与非线性函数" class="headerlink" title="线性函数与非线性函数"></a>线性函数与非线性函数</h2><p><strong>这里需要提到，Sigmoid 函数为非线性函数,阶跃函数也为非线性函数</strong></p>
<blockquote>
<p><em>尤其需要注意的是：激活函数不能使用线性函数，如果使用线性函数，加深神经网络的层数就不具有意义。</em>  </p>
</blockquote>
<p>　　使用线性函数的问题在于，不管如何加深层数，总是存在与之结构等效的“无隐藏层的神经网络。比如下面这个简单的例子（来自《鱼书》）：<br>　　我们将线性函数$h(x) = cx$作为激活函数，将$y(x) = h(h(h(x)))$的运算简单对应为3层神经网络（实际的神经网络更加复杂）。那么这个运算会进行$y(x) = c\times c\times c\times x $的乘法运算，但是同样的运算可以由$y = ax$[where: $a=c^{3}$]这样的一次乘法运算表示。即表明，此次乘法运算可以由没有隐藏层到的神经网络表示，因而<strong>无法发挥多层网络</strong>的优势。<br>　　因此，为发挥叠加层所带来的优势，<strong>激活函数必须使用非线性函数</strong>。</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Python PDF Generator</title>
    <url>/posts/40f8/</url>
    <content><![CDATA[<h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><blockquote>
<p>I met this question since the demand for the generation of digital records for the patients based on the analysis process.<br>It is intersting that python has the ability to generate files with <strong>different formats</strong> like .doc and .pdf .<br>Thus it is worth noting that the import package named <a href="https://www.reportlab.com/">ReportLab</a>.</p>
</blockquote>
<a id="more"></a>
<h2 id="2-Intstallation"><a href="#2-Intstallation" class="headerlink" title="2. Intstallation"></a>2. Intstallation</h2><p>The following code is used for installing ReportLab </p>
<pre class="line-numbers language-python"><code class="language-python">pip install reportlab <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>simple
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="2-1-Regist-Fontname"><a href="#2-1-Regist-Fontname" class="headerlink" title="2.1 Regist Fontname"></a>2.1 Regist Fontname</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> reportlab<span class="token punctuation">.</span>pdfbase <span class="token keyword">import</span> pdfmetrics
<span class="token keyword">from</span> reportlab<span class="token punctuation">.</span>pdfbase<span class="token punctuation">.</span>ttfonts <span class="token keyword">import</span> TTFont

pdfmetrics<span class="token punctuation">.</span>registerFont<span class="token punctuation">(</span>TTFont<span class="token punctuation">(</span><span class="token string">'Fontname'</span><span class="token punctuation">,</span> Fontname<span class="token punctuation">.</span>ttf<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><strong>Note:</strong> The font package must be allocated in the project content.</p>
</blockquote>
<h3 id="2-2-Text-Generation"><a href="#2-2-Text-Generation" class="headerlink" title="2.2 Text Generation"></a>2.2 Text Generation</h3><p>The next step is using code to generate text,which is demonstrated as follow:</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> reportlab<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>styles <span class="token keyword">import</span> getSampleStyleSheet
<span class="token keyword">from</span> reportlab<span class="token punctuation">.</span>platypus <span class="token keyword">import</span> Paragraph<span class="token punctuation">,</span>SimpleDocTemplate
<span class="token keyword">from</span> reportlab<span class="token punctuation">.</span>lib <span class="token keyword">import</span>  colors


Style<span class="token operator">=</span>getSampleStyleSheet<span class="token punctuation">(</span><span class="token punctuation">)</span>
bt <span class="token operator">=</span> Style<span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span>     
<span class="token comment" spellcheck="true"># bt.fontName='Fontname'    #Customer-setting</span>
bt<span class="token punctuation">.</span>fontSize<span class="token operator">=</span><span class="token number">14</span>          <span class="token comment" spellcheck="true">#Fontsize</span>
bt<span class="token punctuation">.</span>firstLineIndent <span class="token operator">=</span> <span class="token number">32</span> <span class="token comment" spellcheck="true">#This attribute supports spaces at the beginning of the first line</span>
bt<span class="token punctuation">.</span>leading <span class="token operator">=</span> <span class="token number">20</span>         <span class="token comment" spellcheck="true">#This attribute is to set the line spacing</span>
ct<span class="token operator">=</span>Style<span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># ct.fontName='Fontname'</span>
ct<span class="token punctuation">.</span>fontSize<span class="token operator">=</span><span class="token number">12</span>
ct<span class="token punctuation">.</span>alignment<span class="token operator">=</span><span class="token number">1</span>          <span class="token comment" spellcheck="true">#center alignment</span>
ct<span class="token punctuation">.</span>textColor <span class="token operator">=</span> colors<span class="token punctuation">.</span>red
hello <span class="token operator">=</span> Paragraph<span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span>bt<span class="token punctuation">)</span>
pdf<span class="token operator">=</span>SimpleDocTemplate<span class="token punctuation">(</span><span class="token string">'test.pdf'</span><span class="token punctuation">)</span>
pdf<span class="token punctuation">.</span>multiBuild<span class="token punctuation">(</span><span class="token punctuation">[</span>hello<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-Code-Trial"><a href="#3-Code-Trial" class="headerlink" title="3. Code Trial"></a>3. Code Trial</h2><p>The following code section can be found after I put the project at the <a href="https://github.com/TOESL100">GitHub</a>.</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generate_pdf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    swelling <span class="token operator">=</span> gl<span class="token punctuation">.</span>get_value<span class="token punctuation">(</span><span class="token string">'swelling'</span><span class="token punctuation">)</span>
    wound_area <span class="token operator">=</span> area<span class="token punctuation">.</span>wound_area
    redness <span class="token operator">=</span> area<span class="token punctuation">.</span>redness_result
    infection <span class="token operator">=</span> area<span class="token punctuation">.</span>infection_result
    pus <span class="token operator">=</span> area<span class="token punctuation">.</span>pus_result

    Story <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    logo <span class="token operator">=</span> <span class="token string">"image/hospital1.png"</span>
    input_image <span class="token operator">=</span> <span class="token string">'uploadimage/input.jpg'</span>
    contour <span class="token operator">=</span> <span class="token string">'outputimage/contour.jpg'</span>
    formatted_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M'</span><span class="token punctuation">)</span>
    full_name <span class="token operator">=</span> <span class="token string">"Fan Haolin"</span>

    im <span class="token operator">=</span> Image<span class="token punctuation">(</span>logo<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">*</span> inch<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">*</span> inch<span class="token punctuation">)</span>
    input_image <span class="token operator">=</span> Image<span class="token punctuation">(</span>input_image<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">*</span> inch<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> inch<span class="token punctuation">)</span>
    contour <span class="token operator">=</span> Image<span class="token punctuation">(</span>contour<span class="token punctuation">,</span> <span class="token number">2.3</span> <span class="token operator">*</span> inch<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> inch<span class="token punctuation">)</span>
    component_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Original Image'</span><span class="token punctuation">,</span> <span class="token string">'Contour Result'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                      <span class="token punctuation">[</span>input_image<span class="token punctuation">,</span> contour<span class="token punctuation">]</span><span class="token punctuation">,</span>
                      <span class="token punctuation">]</span>
    component_table <span class="token operator">=</span> Table<span class="token punctuation">(</span>component_data<span class="token punctuation">,</span> colWidths<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    component_table<span class="token punctuation">.</span>setStyle<span class="token punctuation">(</span>TableStyle<span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token punctuation">(</span><span class="token string">'TOPPADDING'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># (列,行)坐标</span>
        <span class="token punctuation">(</span><span class="token string">'BOTTOMPADDING'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 在默认用户空间中，原点（0,0）点位于左下角</span>
        <span class="token punctuation">(</span><span class="token string">'FONTSIZE'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 字体大小</span>
        <span class="token punctuation">(</span><span class="token string">'BACKGROUND'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> colors<span class="token punctuation">.</span>lightskyblue<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 设置第一行背景颜色</span>
        <span class="token punctuation">(</span><span class="token string">'LINEBEFORE'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> colors<span class="token punctuation">.</span>grey<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 设置表格左边线颜色为灰色，线宽为0.1</span>
        <span class="token punctuation">(</span><span class="token string">'TEXTCOLOR'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> colors<span class="token punctuation">.</span>royalblue<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 设置表格内文字颜色</span>
        <span class="token comment" spellcheck="true"># ('ALIGN', (0, 0), (-1, 0), 'MIDDLE'),  # 对齐</span>
        <span class="token punctuation">(</span><span class="token string">'VALIGN'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'MIDDLE'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 对齐</span>
        <span class="token punctuation">(</span><span class="token string">'GRID'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">,</span> colors<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 设置表格框线为红色，线宽为0.5</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>im<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># Story.append(im2)</span>
    styles <span class="token operator">=</span> getSampleStyleSheet<span class="token punctuation">(</span><span class="token punctuation">)</span>
    styles<span class="token punctuation">.</span>add<span class="token punctuation">(</span>ParagraphStyle<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"TitleStyle"</span><span class="token punctuation">,</span> alignment<span class="token operator">=</span>TA_CENTER<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>
    ptext <span class="token operator">=</span> <span class="token string">'&lt;font size="26">Wound Analysis Report&lt;/font>'</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Paragraph<span class="token punctuation">(</span>ptext<span class="token punctuation">,</span> styles<span class="token punctuation">[</span><span class="token string">"TitleStyle"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    styles<span class="token punctuation">.</span>add<span class="token punctuation">(</span>ParagraphStyle<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Letter'</span><span class="token punctuation">,</span> fontName<span class="token operator">=</span><span class="token string">"dour"</span><span class="token punctuation">,</span> alignment<span class="token operator">=</span>TA_JUSTIFY<span class="token punctuation">)</span><span class="token punctuation">)</span>
    styles<span class="token punctuation">.</span>add<span class="token punctuation">(</span>ParagraphStyle<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Letter_title'</span><span class="token punctuation">,</span> fontName<span class="token operator">=</span><span class="token string">"times_b2"</span><span class="token punctuation">,</span> alignment<span class="token operator">=</span>TA_JUSTIFY<span class="token punctuation">)</span><span class="token punctuation">)</span>
    styles<span class="token punctuation">.</span>add<span class="token punctuation">(</span>ParagraphStyle<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Corner'</span><span class="token punctuation">,</span> fontName<span class="token operator">=</span><span class="token string">"times_b2"</span><span class="token punctuation">,</span> alignment<span class="token operator">=</span>TA_CENTER<span class="token punctuation">)</span><span class="token punctuation">)</span>
    styles<span class="token punctuation">.</span>add<span class="token punctuation">(</span>ParagraphStyle<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Justify'</span><span class="token punctuation">,</span> alignment<span class="token operator">=</span>TA_JUSTIFY<span class="token punctuation">)</span><span class="token punctuation">)</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Spacer<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ptext <span class="token operator">=</span> <span class="token string">'&lt;font size="14">Generation Date:%s&lt;/font>'</span> <span class="token operator">%</span> formatted_time
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Paragraph<span class="token punctuation">(</span>ptext<span class="token punctuation">,</span> styles<span class="token punctuation">[</span><span class="token string">"Letter"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Spacer<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ptext <span class="token operator">=</span> <span class="token string">'&lt;font size="14">Patient Name:%s&lt;/font>'</span> <span class="token operator">%</span> full_name
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Paragraph<span class="token punctuation">(</span>ptext<span class="token punctuation">,</span> styles<span class="token punctuation">[</span><span class="token string">"Normal"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Spacer<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>component_table<span class="token punctuation">)</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Spacer<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ptext <span class="token operator">=</span> f'<span class="token operator">&lt;</span>font size<span class="token operator">=</span><span class="token string">"14"</span><span class="token operator">></span>Swelling <span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;swelling&amp;#125;  &lt;/font>'</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Paragraph<span class="token punctuation">(</span>ptext<span class="token punctuation">,</span> styles<span class="token punctuation">[</span><span class="token string">"Justify"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Spacer<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ptext <span class="token operator">=</span> f'<span class="token operator">&lt;</span>font size<span class="token operator">=</span><span class="token string">"14"</span><span class="token operator">></span>Redness <span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;redness&amp;#125;  &lt;/font>'</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Paragraph<span class="token punctuation">(</span>ptext<span class="token punctuation">,</span> styles<span class="token punctuation">[</span><span class="token string">"Justify"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Spacer<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ptext <span class="token operator">=</span> f'<span class="token operator">&lt;</span>font size<span class="token operator">=</span><span class="token string">"14"</span><span class="token operator">></span>Pus <span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;pus&amp;#125;  &lt;/font>'</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Paragraph<span class="token punctuation">(</span>ptext<span class="token punctuation">,</span> styles<span class="token punctuation">[</span><span class="token string">"Justify"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Spacer<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ptext <span class="token operator">=</span> f'<span class="token operator">&lt;</span>font size<span class="token operator">=</span><span class="token string">"14"</span><span class="token operator">></span>Area <span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;wound_area&amp;#125;  &lt;/font>'</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Paragraph<span class="token punctuation">(</span>ptext<span class="token punctuation">,</span> styles<span class="token punctuation">[</span><span class="token string">"Justify"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Spacer<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ptext <span class="token operator">=</span> f'<span class="token operator">&lt;</span>font size<span class="token operator">=</span><span class="token string">"14"</span><span class="token operator">></span>Infection <span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;infection&amp;#125;  &lt;/font>'</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Paragraph<span class="token punctuation">(</span>ptext<span class="token punctuation">,</span> styles<span class="token punctuation">[</span><span class="token string">"Justify"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Spacer<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># length=1,width=50</span>

    ptext <span class="token operator">=</span> <span class="token string">'&lt;font size="12">Dear %s:&lt;/font>'</span> <span class="token operator">%</span> full_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Paragraph<span class="token punctuation">(</span>ptext<span class="token punctuation">,</span> styles<span class="token punctuation">[</span><span class="token string">"Letter_title"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Spacer<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ptext <span class="token operator">=</span> f<span class="token string">'&lt;font size="12">The above report is for reference only, please consult a professional doctor for '</span> \
            f<span class="token string">'details.&lt;/font> '</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Paragraph<span class="token punctuation">(</span>ptext<span class="token punctuation">,</span> styles<span class="token punctuation">[</span><span class="token string">"Justify"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Spacer<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ptext <span class="token operator">=</span> f<span class="token string">'&lt;font size="12">The Result will strictly abide by the doctor-patient confidentiality agreement.&lt;/font> '</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Paragraph<span class="token punctuation">(</span>ptext<span class="token punctuation">,</span> styles<span class="token punctuation">[</span><span class="token string">"Justify"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Spacer<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ptext <span class="token operator">=</span> f<span class="token string">'&lt;font size="12">Sincerely,&lt;/font>'</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Paragraph<span class="token punctuation">(</span>ptext<span class="token punctuation">,</span> styles<span class="token punctuation">[</span><span class="token string">"Letter_title"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Spacer<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ptext <span class="token operator">=</span> f<span class="token string">'&lt;font size="12">Wound Analysis Application&lt;/font>'</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Paragraph<span class="token punctuation">(</span>ptext<span class="token punctuation">,</span> styles<span class="token punctuation">[</span><span class="token string">"Letter_title"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Spacer<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ptext <span class="token operator">=</span> f<span class="token string">'&lt;font size="10">Copyright @ 2021 Wound Analysis All Rights Reserved.&lt;/font>'</span>
    Story<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Paragraph<span class="token punctuation">(</span>ptext<span class="token punctuation">,</span> styles<span class="token punctuation">[</span><span class="token string">"Corner"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    doc<span class="token punctuation">.</span>build<span class="token punctuation">(</span>Story<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Python Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Kivy Introduction and Trial</title>
    <url>/posts/81b9/</url>
    <content><![CDATA[<h2 id="Introducing-Kivy"><a href="#Introducing-Kivy" class="headerlink" title="Introducing Kivy"></a>Introducing Kivy</h2><blockquote>
<p><a href="https://kivy.org/#home">Kivy</a>-用于快速开发利用创新用户界面的应用程序（例如多点触摸应用程序）的开源Python库。<br>以下内容主要介绍 kivy 在Windows端的安装(基于Anoconda3,Pycharm)以及简单应用。</p>
</blockquote>
<a id="more"></a>

<h2 id="Kivy-Installation"><a href="#Kivy-Installation" class="headerlink" title="Kivy Installation"></a>Kivy Installation</h2><blockquote>
<p>涉及到的所有依赖均通过cmd中的pip-install安装完成，感谢<a href="https://pypi.tuna.tsinghua.edu.cn/simple">清华镜像源</a>提供的帮助。</p>
</blockquote>
<pre class="line-numbers language-python"><code class="language-python">pip install PACKAGES <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>simple <span class="token operator">-</span><span class="token operator">-</span>trusted<span class="token operator">-</span>host pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>因为中国国内对kivy的普及程度不高，且多数app开发仍然使用原生的Java 语言作为底层基础，因而以下对kivy框架的背景、搭建、使用做一个简要的介绍</p>
</blockquote>
<h2 id="Kivy框架的安装与使用"><a href="#Kivy框架的安装与使用" class="headerlink" title="Kivy框架的安装与使用"></a>Kivy框架的安装与使用</h2><p>1.通过以下命令进行kivy框架的搭建与使用，主要有两种方法:<br>三行命令以安装Kivy:</p>
<pre class="line-numbers language-python"><code class="language-python">python <span class="token operator">-</span>m pip install docutils pygments pypiwin64 kivy<span class="token punctuation">.</span>deps<span class="token punctuation">.</span>sdl2 kivy<span class="token punctuation">.</span>deps<span class="token punctuation">.</span>glew
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-python"><code class="language-python">python <span class="token operator">-</span>m pip install kivy<span class="token punctuation">.</span>deps<span class="token punctuation">.</span>gstreamer
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-python"><code class="language-python">python <span class="token operator">-</span>m pip install kivy
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>值得注意的是，kivy<a href="https://kivy.org/doc/stable/gettingstarted/installation.html#install-pip)">官网</a>,针对windows的安装方法为：<br><strong>To install the stable version of Kivy, from the terminal do:</strong></p>
<pre class="line-numbers language-python"><code class="language-python">python <span class="token operator">-</span>m pip install kivy<span class="token punctuation">[</span>base<span class="token punctuation">]</span> kivy_examples <span class="token operator">-</span><span class="token operator">-</span>no<span class="token operator">-</span>binary kivy
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>2.安装kivy框架的官方示例</p>
<pre class="line-numbers language-python"><code class="language-python">python <span class="token operator">-</span>m pip install kivy_examples
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>3.验证kivy框架安装成功(Python IDLE)中运行</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> kivy<span class="token punctuation">.</span>app <span class="token keyword">import</span> App
<span class="token keyword">from</span> kivy<span class="token punctuation">.</span>uix<span class="token punctuation">.</span>button <span class="token keyword">import</span> Button
 
<span class="token keyword">class</span> <span class="token class-name">TestApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">build</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Button<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">'FHL First App'</span><span class="token punctuation">)</span>
 
TestApp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其实现代码展示如下:<br><img src="/posts/81b9/kivy1.png" alt="Code for first Kivy App"></p>
<p>其运行结果展示如下：<br><img src="/posts/81b9/kivy2.png" alt="Outcome for first Kivy App"></p>
<p>以上仅为对kivy安装的简要说明，其详尽的功能有机会会根据项目实例进行介绍。</p>
]]></content>
      <categories>
        <category>Kivy Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Kivy</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 中的 类和对象</title>
    <url>/posts/bdb2/</url>
    <content><![CDATA[<p><strong>对象</strong> 是python 中不可回避的知识点，Python无处不对象。如果把一个人比作对象，人们通常从外观方面和行为方面进行描述，比如金发碧眼，长头发等，这些属于静态的外观特征，而游泳，唱歌等属于行为方面的动态对象 。</p>
<a id="more"></a>
<p>Python 中的<strong>对象</strong> 亦是如此，一个对象的特征称为<strong>“属性”</strong>，一个对象的行为称为<strong>“方法”</strong>。<br>总而言之，<strong>对象=属性+方法</strong></p>
<hr>
<h2 id="面对对象编程——self"><a href="#面对对象编程——self" class="headerlink" title="面对对象编程——self"></a>面对对象编程——self</h2><blockquote>
<p>如果将类比作图纸，那么由类实例化的对象才是真正可以住进去的房子。Python 中的self参数就是这样的道理，由同一个类可以生成无数对象，当第一个对象的方法被调用时，对象会将自身的引用作为第一个参数传给该方法，那么python就知道需要操作哪个对象的方法了。</p>
</blockquote>
<p>通过一个简单的例子理解这一思想。</p>
<h3 id="Code-block"><a href="#Code-block" class="headerlink" title="Code block"></a>Code block</h3><pre class="line-numbers language-python"><code class="language-python">@requires_authorization
<span class="token keyword">class</span> <span class="token class-name">Study</span><span class="token punctuation">:</span>
<span class="token keyword">def</span> <span class="token function">setNmae</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token keyword">def</span> <span class="token function">study</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Who love studying?%s loves studying."</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> Study<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>setNmae<span class="token punctuation">(</span>Fan Haolin<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>study<span class="token punctuation">(</span><span class="token punctuation">)</span>
Who love studying?Fan Haolin loves studying<span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<h2 id="Python-魔法方法——-“init-”"><a href="#Python-魔法方法——-“init-”" class="headerlink" title="Python 魔法方法—— “init()”"></a>Python 魔法方法—— “<strong>init</strong>()”</h2><blockquote>
<p>通常把此种方法称为构造方法，其魔法体现在只要实例化一个对象，这个方法就会在对象被创建时自动调用。其实，实例化对象是可以传入参数的，这些参数会自动传入<strong>init</strong>()中，可以通过重写这个方法以自定义对象的初始化操作。</p>
</blockquote>
<p>同样的一个简单的例子。</p>
<h3 id="Code-block-1"><a href="#Code-block-1" class="headerlink" title="Code block"></a>Code block</h3><pre class="line-numbers language-python"><code class="language-python">@requires_authorization
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Study</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">def</span> <span class="token function">study</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Who love studying?%s loves studying."</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> Study<span class="token punctuation">(</span>Fan Haolin<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>study<span class="token punctuation">(</span><span class="token punctuation">)</span>
Who love studying?Fan Haolin loves studying<span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Python Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
